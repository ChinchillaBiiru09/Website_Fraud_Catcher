<div class="col-md-4">
							<label for="validationCustomUsername" class="form-label">Tanggal Ujian</label>
							<div class="input-group has-validation">
							  <span class="input-group-text" id="inputGroupPrepend">@</span>
							  <input type="date" class="form-control" id="validationCustomUsername" name="tg_lahir" aria-describedby="inputGroupPrepend" required>
							</div>
						  </div>

                          <div class="col-md-4">
							<label for="validationCustom04" class="form-label">Status</label>
							<select class="form-select" id="validationCustom04" name="status" required>
							  <option selected disabled value="">Pilih...</option>
							  <option value="Terlambat">Terlambat</option>
							  <option value="Tepat Waktu">Tepat waktu</option>
							</select>
						  </div>

                          <div class="mb-3">
								<label for="message-text" class="col-form-label">Keterangan</label>
								<textarea class="form-control" name="alamat" style="height: 180px;" id="message-text"></textarea>
						  </div>
						  <div class="col-md-4">
                            <label for="validationCustom05" class="form-label">Jenis Kelamin</label><br>
							<input type="radio" name="Jenis_kelamin" id="validationCustom05" value="Laki-laki" required>
							<label for="validationCustom05" class="form-label">Laki laki</label><br>
                            <input type="radio" name="Jenis_kelamin" id="validationCustom05" value="Perempuan" required>
							<label for="validationCustom05" class="form-label">Perempuan</label>
							<div class="invalid-feedback">
							  Please provide a valid zip.
							</div>
						  </div>


<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
<div class="mb-3">
							<label for="recipient-name" class="col-form-label">Nama Pengawas</label>
							<input type="text" name="perusahaan" class="form-control" id="recipient-name">
						  </div>
						  <div class="mb-3">
							<label for="recipient-name" class="col-form-label">Kontak</label>
							<input type="text" class="form-control" name="kontak" id="recipient-name">
						  </div>
						<div class="mb-3">
						<label for="message-text" class="col-form-label">Alamat</label>
							<textarea class="form-control" name="alamat" style="height: 180px;" id="message-text"></textarea>
						</div>




						
						<button class="btn btn-sm btn-primary">
										<a style="text-decoration: none; color: white;" href="/pengawasan"><b>Mulai</b></a>
									</button>


									<div class="mb-3">
							<label for="recipient-name" class="col-form-label">Hari & Tanggal</label>
							<input type="text" name="namaObat" class="form-control" id="recipient-name">
						  </div>
						  <div class="mb-3">
							<label for="validationCustom04" class="form-label">Mata Pelajaran</label>
							<select class="form-select" id="validationCustom04" name="jenisObat" required>
							  <option selected disabled value="">Pilih...</option>
							  <option value="Bhs Indonesia">Bhs Indonesia</option>
							  <option value="Bhs Inggris">Bhs Inggris</option>
							  <option value="Matematika">Matematika</option>
							  <option value="Ipa">Ipa</option>
							</select>
						  </div>
						  <div class="mb-3">
							<label for="recipient-name" class="col-form-label">Jumlah Soal</label>
							<input type="number" class="form-control" name="harga_beli" id="recipient-name">
						  </div>
						  <div class="mb-3">
							<label for="recipient-name" class="col-form-label">Soal Rusak</label>
							<input type="number" class="form-control" name="harga_jual" id="recipient-name">
						  </div>
						  <input type="hidden" name="kondisi" value="Baik">


nltk.download('popular')
lemmatizer = WordNetLemmatizer()
model = load_model('application/model/model.h5')
intents = json.loads(open('application/model/data.json').read())
words = pickle.load(open('application/model/texts.pkl','rb'))
classes = pickle.load(open('application/model/labels.pkl','rb'))

def clean_up_sentence(sentence):
    # tokenize the pattern - split words into array
    sentence_words = nltk.word_tokenize(sentence)
    # stem each word - create short form for word
    sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
    return sentence_words

# return bag of words array: 0 or 1 for each word in the bag that exists in the sentence

def bow(sentence, words, show_details=True):
    # tokenize the pattern
    sentence_words = clean_up_sentence(sentence)
    # bag of words - matrix of N words, vocabulary matrix
    bag = [0]*len(words)  
    for s in sentence_words:
        for i,w in enumerate(words):
            if w == s: 
                # assign 1 if current word is in the vocabulary position
                bag[i] = 1
                if show_details:
                    print ("found in bag: %s" % w)
    return(np.array(bag))

def predict_class(sentence, model):
    # filter out predictions below a threshold
    p = bow(sentence, words,show_details=False)
    res = model.predict(np.array([p]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]
    # sort by strength of probability
    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({"intent": classes[r[0]], "probability": str(r[1])})
    return return_list

def getResponse(ints, intents_json):
    tag = ints[0]['intent']
    list_of_intents = intents_json['intents']
    for i in list_of_intents:
        if(i['tag']== tag):
            result = random.choice(i['responses'])
            break
    return result

def chatbot_response(msg):
    ints = predict_class(msg, model)
    res = getResponse(ints, intents)
    return res

@app.route("/get")
@Login_dulu
def get_bot_response():
    userText = request.args.get('msg')
    return chatbot_response(userText)

@app.route('/chatbot')
@Login_dulu
def chatbot():
    return render_template('bot.html')
	
from pickle4 import pickle
from nltk.stem import WordNetLemmatizer
import nltk, random, tensorflow
from tensorflow.python.keras.backend import dtype

from math import hypot